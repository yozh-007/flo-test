@mixin dib($valign: top) {
  display: inline-block;
  vertical-align: $valign;
}

@mixin dib-fix {
  margin-right: -0.26667em;
}

@mixin table-reset {
  width: 100%;
  border-spacing: 0;
  border-collapse: collapse;

  td {
    empty-cells: show
  }
}

@mixin border-radius($radius: $border-radius) {
  border-radius: $radius;
  background-clip: padding-box;
}


@mixin size($width, $height) {
  width: $width;
  height: $height;
}

@mixin square($size) {
  @include size($size, $size);
}

@mixin padding-x($padding) {
  padding-right: $padding;
  padding-left: $padding;
}

@mixin padding-y($padding) {
  padding-top: $padding;
  padding-bottom: $padding;
}

@mixin margin-x($margin) {
  margin-right: $margin;
  margin-left: $margin;
}

@mixin margin-y($margin) {
  margin-top: $margin;
  margin-bottom: $margin;
}

@mixin screen($min, $max) {
  @media screen and (min-width: $min) and (max-width: $max) {
    @content;
  }
}

@mixin max-screen($res) {
  @media screen and (max-width: $res) {
    @content;
  }
}

@mixin min-screen($res) {
  @media screen and (min-width: $res) {
    @content;
  }
}


@mixin fs($size, $line-height) {
  font-size: $size;
  line-height: $line-height;
}

@mixin filter-none {
  filter: none;
  -webkit-filter: none;
  -moz-filter: none;
  -o-filter: none;
  -ms-filter: none;
  filter: #{'-'};
}

@mixin clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin visually-hidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}


@mixin absolute($top: auto, $right: auto, $bottom: auto, $left: auto) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin fixed($top: auto, $right: auto, $bottom: auto, $left: auto) {
  position: fixed;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin list-reset($override: false) {
  @if not $override {
    margin: 0;
    padding: 0;
  }
  list-style: none outside none;
  // display: block;
}

@mixin text-ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin box-sizing($type: border-box) {
  -webkit-box-sizing: $type;
  -moz-box-sizing: $type;
  box-sizing: $type;
}

@mixin border-box-all {
  &,
  *,
  *:after,
  *:before {
    @include box-sizing;
  }
}

@mixin content-box-all {
  &,
  *,
  *:before,
  *:after {
    -webkit-box-sizing: content-box;
    -moz-box-sizing: content-box;
    box-sizing: content-box;
  }
}

//@mixin screen($min, $max) {
//  @media screen and (min-width: $min) and (max-width: $max) {
//    @content;
//  }
//}
//
//@mixin max-screen($res) {
//  @media screen and (max-width: #{$res}) {
//    @content;
//  }
//}
//
//@mixin min-screen($res) {
//  @media screen and (min-width: #{$res}) {
//    @content;
//  }
//}

@mixin retina {
  @media screen and(min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6 / 2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    @content;
  }
}


//
//     Mixins for prefixes
//

@mixin flex {
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
}

@mixin box-shadow($string) {
  -webkit-box-shadow: $string;
  -moz-box-shadow: $string;
  box-shadow: $string;
}

@mixin appearance($value: none) {
  -webkit-appearance: $value;
  -moz-appearance: $value;
  appearance: $value;
}

@mixin border-radius-ext($radius: $border-radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -o-border-radius: $radius;
  border-radius: $radius;

  -moz-background-clip: padding;
  -webkit-background-clip: padding-box;
  background-clip: padding-box;
}

@mixin transition($parameter: all 0.3s ease) {
  -webkit-transition: $parameter;
  -moz-transition:    $parameter;
  -ms-transition:     $parameter;
  -o-transition:      $parameter;
  transition: $parameter;
}

@mixin transitionMultiple($parameter...) {
  -webkit-transition: $parameter;
  -moz-transition:    $parameter;
  -ms-transition:     $parameter;
  -o-transition:      $parameter;
  transition: $parameter;
}

@mixin opacity($opacity) {
  @if $opacity == 1 {
    filter: unquote("progid:DXImageTransform.Microsoft.Alpha(enabled=false)");
  } @else {
    filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
  }
  -moz-opacity: $opacity;
  -khtml-opacity: $opacity;
  opacity: $opacity;
}

@mixin filter-blur($filter) {
  filter: blur(#{$filter}px);
  -webkit-filter: blur(#{$filter}px);
  -moz-filter: blur(#{$filter}px);
  -o-filter: blur(#{$filter}px);
  -ms-filter: blur(#{$filter}px);
  filter: progid:DXImageTransform.Microsoft.Blur(PixelRadius='#{$filter}');
}


@mixin font-smoothing($value: on) {
  @if $value == on {
    font-smoothing: antialiased;
    -webkit-font-smoothing: antialiased;
    -moz-font-smoothing: antialiased;
    -ms-font-smoothing: antialiased;
    -o-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else if $value == off {
    font-smoothing: none;
    -webkit-font-smoothing: none;
    -moz-font-smoothing: none;
    -ms-font-smoothing: none;
    -o-font-smoothing: none;
    -moz-osx-font-smoothing: unset;
  } @else {
    font-smoothing: subpixel-antialiased;
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-font-smoothing: subpixel-antialiased;
    -ms-font-smoothing: subpixel-antialiased;
    -o-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

@mixin selection($background: $yellow, $color: $black) {
  ::-moz-selection {
    background: $background;
    color: $color;
    text-shadow: none;
  }
  ::selection {
    background: $background;
    color: $color;
    text-shadow: none;
  }
}

@mixin placeholder {
  &:-ms-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
  &::placeholder {
    @content;
  }
}

@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
  -khtml-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value};
}

@mixin transform($params) {
  @include css3-prefix('transform', $params);
}

@mixin noselect {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
